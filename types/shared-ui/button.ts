import Link from "next/link";
export type ButtonProps = {
    children: React.ReactNode;
    type?: 'button' | 'submit' | 'reset';
    onClick?: () => void;
    className?: string;
    disabled?: boolean;
    isLoading?: boolean;
    icon?: React.ReactNode |  JSX.Element;
    iconPosition?: 'left' | 'right';
    size?: 'sm' | 'md' | 'lg';
    variant?: string;
    block?: boolean;
    rounded?: boolean;
    shadow?: boolean;
    outline?: boolean;
    href?: string;
    target?: string;
    rel?: string;
    download?: string;
    as?: React.ElementType | typeof Link;
    to?: string;
    replace?: boolean;
    innerRef?: React.Ref<any>;
    exact?: boolean;
    strict?: boolean;
    isActive?: (match: any, location: any) => boolean;
    activeClassName?: string;
    activeStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    css?: string;
    cssModule?: any;
    role?: string;
    ariaLabel?: string;
    ariaPressed?: boolean;
    ariaExpanded?: boolean;
    ariaControls?: string;
    ariaDescribedby?: string;
    ariaHaspopup?: string;
    ariaHidden?: boolean;
    ariaLive?: 'off' | 'assertive' | 'polite';
    ariaAtomic?: boolean;
    ariaBusy?: boolean;
    ariaOwns?: string;
    ariaFlowto?: string;
    ariaActivedescendant?: string;
    ariaPosinset?: number;
    ariaSetsize?: number;
    ariaLabelledby?: string;
    ariaValuenow?: number;
    ariaValuemin?: number;
    ariaValuemax?: number;
    ariaDisabled?: boolean;
    ariaReadonly?: boolean;
    ariaRequired?: boolean;
    ariaInvalid?: boolean;
    ariaControlsid?: string;
    ariaDescribedbyid?: string;
    ariaFlowtoid?: string;
    ariaOwnsid?: string;
    ariaActivedescendantid?: string;
    ariaPosinsetid?: string;
    ariaSetsizeid?: string;
    ariaLabelledbyid?: string;
    ariaValuenowid?: string;
    ariaValueminid?: string;
    ariaValuemaxid?: string;
}